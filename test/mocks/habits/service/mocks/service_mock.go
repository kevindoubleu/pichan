// Code generated by mockery v2.22.1. DO NOT EDIT.

package habits_test_mock

import (
	habits "github.com/kevindoubleu/pichan/internal/habits"
	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Get provides a mock function with given fields: id
func (_m *Store) Get(id int) (*habits.Scorecard, error) {
	ret := _m.Called(id)

	var r0 *habits.Scorecard
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*habits.Scorecard, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *habits.Scorecard); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*habits.Scorecard)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: scorecard
func (_m *Store) Insert(scorecard habits.Scorecard) (*habits.Scorecard, error) {
	ret := _m.Called(scorecard)

	var r0 *habits.Scorecard
	var r1 error
	if rf, ok := ret.Get(0).(func(habits.Scorecard) (*habits.Scorecard, error)); ok {
		return rf(scorecard)
	}
	if rf, ok := ret.Get(0).(func(habits.Scorecard) *habits.Scorecard); ok {
		r0 = rf(scorecard)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*habits.Scorecard)
		}
	}

	if rf, ok := ret.Get(1).(func(habits.Scorecard) error); ok {
		r1 = rf(scorecard)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsLive provides a mock function with given fields:
func (_m *Store) IsLive() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// List provides a mock function with given fields:
func (_m *Store) List() ([]habits.Scorecard, error) {
	ret := _m.Called()

	var r0 []habits.Scorecard
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]habits.Scorecard, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []habits.Scorecard); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]habits.Scorecard)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStore(t mockConstructorTestingTNewStore) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
